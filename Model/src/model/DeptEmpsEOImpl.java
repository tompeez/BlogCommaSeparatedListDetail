package model;

import java.sql.SQLException;

import java.util.ArrayList;

import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;


//import oracle.jbo.domain.Array;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 22 12:49:53 CEST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DeptEmpsEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        DeptId {
            public Object get(DeptEmpsEOImpl obj) {
                return obj.getDeptId();
            }

            public void put(DeptEmpsEOImpl obj, Object value) {
                obj.setDeptId((Number)value);
            }
        }
        ,
        DepartmentName {
            public Object get(DeptEmpsEOImpl obj) {
                return obj.getDepartmentName();
            }

            public void put(DeptEmpsEOImpl obj, Object value) {
                obj.setDepartmentName((String)value);
            }
        }
        ,
        ManagerId {
            public Object get(DeptEmpsEOImpl obj) {
                return obj.getManagerId();
            }

            public void put(DeptEmpsEOImpl obj, Object value) {
                obj.setManagerId((Number)value);
            }
        }
        ,
        LocationId {
            public Object get(DeptEmpsEOImpl obj) {
                return obj.getLocationId();
            }

            public void put(DeptEmpsEOImpl obj, Object value) {
                obj.setLocationId((Number)value);
            }
        }
        ,
        EmpList {
            public Object get(DeptEmpsEOImpl obj) {
                return obj.getEmpList();
            }

            public void put(DeptEmpsEOImpl obj, Object value) {
                obj.setEmpList((String)value);
            }
        }
        ,
        EmpArray {
            public Object get(DeptEmpsEOImpl obj) {
                return obj.getEmpArray();
            }

            public void put(DeptEmpsEOImpl obj, Object value) {
                obj.setEmpArray((Object)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(DeptEmpsEOImpl object);

        public abstract void put(DeptEmpsEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int DEPTID = AttributesEnum.DeptId.index();
    public static final int DEPARTMENTNAME = AttributesEnum.DepartmentName.index();
    public static final int MANAGERID = AttributesEnum.ManagerId.index();
    public static final int LOCATIONID = AttributesEnum.LocationId.index();
    public static final int EMPLIST = AttributesEnum.EmpList.index();
    public static final int EMPARRAY = AttributesEnum.EmpArray.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DeptEmpsEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model.DeptEmpsEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for DeptId, using the alias name DeptId.
     * @return the DeptId
     */
    public Number getDeptId() {
        return (Number)getAttributeInternal(DEPTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DeptId.
     * @param value value to set the DeptId
     */
    public void setDeptId(Number value) {
        setAttributeInternal(DEPTID, value);
    }

    /**
     * Gets the attribute value for DepartmentName, using the alias name DepartmentName.
     * @return the DepartmentName
     */
    public String getDepartmentName() {
        return (String)getAttributeInternal(DEPARTMENTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepartmentName.
     * @param value value to set the DepartmentName
     */
    public void setDepartmentName(String value) {
        setAttributeInternal(DEPARTMENTNAME, value);
    }

    /**
     * Gets the attribute value for ManagerId, using the alias name ManagerId.
     * @return the ManagerId
     */
    public Number getManagerId() {
        return (Number)getAttributeInternal(MANAGERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ManagerId.
     * @param value value to set the ManagerId
     */
    public void setManagerId(Number value) {
        setAttributeInternal(MANAGERID, value);
    }

    /**
     * Gets the attribute value for LocationId, using the alias name LocationId.
     * @return the LocationId
     */
    public Number getLocationId() {
        return (Number)getAttributeInternal(LOCATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LocationId.
     * @param value value to set the LocationId
     */
    public void setLocationId(Number value) {
        setAttributeInternal(LOCATIONID, value);
    }

    /**
     * Gets the attribute value for EmpList, using the alias name EmpList.
     * @return the EmpList
     */
    public String getEmpList() {
        return (String)getAttributeInternal(EMPLIST);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpList.
     * @param value value to set the EmpList
     */
    public void setEmpList(String value) {
        setAttributeInternal(EMPLIST, value);
    }

    /**
     * Gets the attribute value for EmpArray, using the alias name EmpArray.
     * @return the EmpArray
     */
    public Object getEmpArray() {
        ArrayList<Number> emps = new ArrayList<Number>();
        String empList = getEmpList();
        if (empList != null) {
            String[] split = empList.split(",");
            for (String splitpart : split) {
                Number n = null;
                try {
                    n = new Number(splitpart.trim());
                    emps.add(n);
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }

        return emps;
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpArray.
     * @param value value to set the EmpArray
     */
    public void setEmpArray(Object value) {
        setAttributeInternal(EMPARRAY, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param deptId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number deptId) {
        return new Key(new Object[]{deptId});
    }


}
